#!usr/bin/env python3

# -*- coding: utf-8 -*-
"""
    PEP8 Style 
"""
# --- Standard library ---
import os
import re
import json
import logging
from time import localtime, strftime

# --- Third-party libraries ---
from flask import Flask, request, abort, jsonify, render_template, Blueprint
import requests
import ollama
from pymongo import MongoClient
import pandas as pd
from linebot.v3 import WebhookHandler
from linebot.v3.exceptions import InvalidSignatureError
from linebot.v3.messaging import (
    Configuration,
    ApiClient,
    MessagingApi,
    ReplyMessageRequest,
    TextMessage,
)
from linebot.v3.webhooks import MessageEvent, TextMessageContent
from utils.helpers import *

# --- routes ---
from db import collection
from routes.website import website_bp

os.system('cls' if os.name == 'nt' else 'clear')

# YOUR_CHANNEL_ACCESS_TOKEN AND YOUR_CHANNEL_SECRET
configuration = Configuration(access_token='qyflOf3hPw+QSBsJ2e3VPt+snbADiut9+dTWShe0fq2kB3LyfynsB7V9G0ssAevh96WUzpRcrUxeX+fpvlL1hvLJ3eQvFTZTC4gNILyrJBq+uZiTz2TRAq0mrr9qYCZ6+vZHndC2Dp6GSP6hKdO0oAdB04t89/1O/w1cDnyilFU=')
handler = WebhookHandler('a51b3f381532d12e4a94ade383058a37')

# Generative AI 
OLLAMA_URL = "http://localhost:11434/api/generate"
OLLAMA_MODEL = "llama3.2"

# Database
client = MongoClient('mongodb://localhost:27017/')
collection = client["Testing"]["Packages"]

# --- Initialize Flask app ---
from __init__ import create_app
app = create_app()

@app.route("/callback", methods=['POST'])
def callback():
    # get X-Line-Signature header value
    signature = request.headers['X-Line-Signature']

    # get request body as text
    body = request.get_data(as_text=True)
    app.logger.info("Request body: " + body)

    # handle webhook body
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        app.logger.info("Invalid signature. Please check your channel access token/channel secret.")
        abort(400)

    return 'OK'


#! FIX: Non-Length must be between 0 and 5000 [text-length] 
#! FIX: Error Code

@handler.add(MessageEvent, message=TextMessageContent)
def handle_message(event):
    user_input = event.message.text.strip()

    with ApiClient(configuration) as api_client:
        line_bot_api = MessagingApi(api_client)

        try:
            # ‚Äî‚Äî‚Äî ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ: ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ LLM ‚Äî‚Äî‚Äî
            if not re.search(r"\bsearch\b", user_input, re.IGNORECASE):
                payload = {
                    "model": OLLAMA_MODEL,
                    "prompt": user_input,
                    "stream": False
                }
                resp = requests.post(OLLAMA_URL, json=payload)
                resp.raise_for_status()
                answer = resp.json().get("response", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ")

                line_bot_api.reply_message_with_http_info(
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text=answer)]
                    )
                )
                return  # **‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ** ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡πâ‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠

            # ‚Äî‚Äî‚Äî ‡∏Å‡∏£‡∏ì‡∏µ search: ‡∏î‡∏∂‡∏á param ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‚Äî‚Äî‚Äî
            plan_code, age, sex = parse_search_params(user_input)

            if not any([plan_code, age, sex]):
                msg = (
                    "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ '‡πÅ‡∏ú‡∏ô', '‡∏≠‡∏≤‡∏¢‡∏∏' ‡∏´‡∏£‡∏∑‡∏≠ '‡πÄ‡∏û‡∏®' ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á\n"
                    "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: search ‡∏≠‡∏≤‡∏¢‡∏∏ 35 ‡πÄ‡∏û‡∏®‡∏ä‡∏≤‡∏¢ ‡πÅ‡∏ú‡∏ô 5M ‚úÖ"
                )
                line_bot_api.reply_message_with_http_info(
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text=msg)]
                    )
                )
                return

            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å DB
            query = {"Class": {"$regex": plan_code, "$options": "i"}} if plan_code else {}
            docs = list(collection.find(query))

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            lines = [f"‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(docs)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"]
            for doc in docs:
                if age is not None and 'year' in doc and not within_age_range(age, doc['year']):
                    continue
                price_raw  = determine_price(doc, sex)
                price_txt  = format_price(price_raw)
                year_txt   = doc.get('year', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏')
                lines.append(f"üîé ‡πÅ‡∏ú‡∏ô {doc['Class']} ({year_txt})\n{price_txt}")

            result = "\n\n".join(lines) if len(lines)>1 else "‚ùó ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏£‡∏±‡∏ö"
            
            # --- ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏≤‡∏á LINE ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô safe_reply ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô 5000 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ ---
            try:
                safe_reply(line_bot_api, event.reply_token, result)
            except Exception as e:    
                logging.error(f"Error sending reply: {e}")
                # fallback to sending a simple message
                line_bot_api.reply_message_with_http_info(
                    ReplyMessageRequest(
                        reply_token=event.reply_token,
                        messages=[TextMessage(text="‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ")]
                    )
                )

        except Exception as e:
            # ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î error ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
            error_msg = f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}"
            line_bot_api.reply_message_with_http_info(
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text=error_msg)]
                )
            )

if __name__ == "__main__":
    is_ollama_online(OLLAMA_URL=OLLAMA_URL)
    app.run(debug=True)
